type Subject {
  id: ID!
  grade: Grade!
  name: String!
  teachers: [ User! ]!
  students: [ User! ]!
  forum: [Discussion!]!
  evaluations: [Evaluation!]!
  mimeType: String
  photo: String
}

input SubjectCreationInput {
  gradeId: ID!
  name: String!
}

input UpdateSubjectInput {
  subjectId: ID!
  name: String
  mimeType: String
  photo: String
}

extend type Query {
  findSubjectById (input: ID!) : Subject
}

extend type Mutation {
  createSubject (input: SubjectCreationInput!) : Subject
  updateSubject(input: UpdateSubjectInput!): Subject
  removeSubject (subjectId: ID!) : Boolean 
  addTeacherToSubject (subjectId: ID!, teacherId: ID!) : Subject
  addStudentToSubject (subjectId: ID!, studentId: ID!) : Subject
  addStudentsToSubject (subjectId: ID!, studentsIds: [ID!]!) : Subject
  addStudentToSubjectsInGrade (gradeId: ID!, studentId: ID!) : [Subject]
  addStudentsToSubjectsInGrade (gradeId: ID!, studentsIds: [ID!]!) : Grade
  removeInstitutionSubjectsFromUser (institutionId: ID!, studentId: ID!) : Boolean
  removeStudentFromSubject (subjectId: ID!, studentId: ID!) : Boolean
  removeTeacherFromSubject (subjectId: ID!, teacherId: ID!) : Boolean
  removeEveryStudentFromSubject(subjectId: ID!) : Boolean
  copyStudentsFromSubject(fromId: ID!, toId: ID!) : Subject
}